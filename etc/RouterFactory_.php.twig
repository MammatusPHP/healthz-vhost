<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Chimera\ServiceBus\Tactician\ServiceBus;
use League\Tactician\CommandBus;
use Mammatus\Http\Server\WebSockets\Broadcaster;
use Mammatus\Http\Server\WebSockets\ResponseTransformerMiddleware;
use Mammatus\Http\Server\WebSockets\RpcInput;
use Mammatus\LifeCycleEvents\Initialize;
use Mammatus\LifeCycleEvents\Shutdown;
use Psr\Container\ContainerInterface;
use Psr\Log\LoggerInterface;
use React\EventLoop\LoopInterface;
use React\Promise\PromiseInterface;
use Thruway\Peer\Client;
use Thruway\ClientSession;
use Thruway\Peer\Router;
use WyriHaximus\Broadcast\Contracts\Listener;

/**
 * This class is generated by mammatus/http-server
 */
final class RouterFactory_{{ server.vhost().name() }} implements Listener
{
    private LoopInterface $loop;
    private ?Router $router = null;
    private LoggerInterface $logger;
    private ContainerInterface $container;

    public function __construct(LoopInterface $loop, LoggerInterface $logger, ContainerInterface $container)
    {
        $this->loop = $loop;
        $this->logger = $logger;
        $this->container = $container;
    }

    private function setUp()
    {
        if ($this->router instanceof Router) {
            return;
        }

        $this->router = new Router($this->loop);
        $busses = [];
        {% for realm in server.realms() %}
        {% for bus in realm.busses() %}
        $busses['{{ server.vhost().name() }}']['{{ bus }}'] = new ServiceBus(new CommandBus([new ResponseTransformerMiddleware(), CommandHandlerMiddlewareFactory_{{ server.vhost().name() }}_{{ bus }}::create($this->container)]));
        {% endfor %}
        {% endfor %}

        {% for realm in server.realms() %}
        $internalClient_{{ realm.name() }} = new Client('{{ realm.name() }}', $this->loop);
        $internalClient_{{ realm.name() }}->on('open', function (ClientSession $session) use ($busses): void {
            {% for rpc in realm.rpcs() %}
            $session->register('{{ rpc.name() }}', static fn (array $args): PromiseInterface => $busses['{{ server.vhost().name() }}']['{{ rpc.bus() }}']->handle(\{{ rpc.command() }}::fromInput(new RpcInput($args[0] ?? null))));
            $this->logger->debug('Registered RPC "{{ rpc.name() }}" on realm "{{ realm.name() }}" for bus "{{ rpc.bus() }}" on the "{{ server.vhost().name() }}" vhost');
            {% endfor %}
            {% if realm.broadcasts()|length > 0 %}
            $broadcaster_{{ realm.name() }} = new Broadcaster($session);
            {% endif %}
            {% for broadcast in realm.broadcasts() %}
            $this->container->get(\{{ broadcast.class() }}::class)->broadcast($broadcaster_{{ realm.name() }});
            {% endfor %}
            {% for subscription in realm.subscriptions() %}
            $session->subscribe('{{ subscription.name() }}', static fn (array $args): PromiseInterface => $busses['{{ server.vhost().name() }}']['{{ subscription.bus() }}']->handle(\{{ subscription.command() }}::fromInput(new RpcInput($args[0] ?? null))));
            {% endfor %}
        });
        $internalClient_{{ realm.name() }}->on('close', function (ClientSession $session): void {
            {% for rpc in realm.rpcs() %}
            $session->unregister('{{ rpc.name() }}');
            $this->logger->debug('Unregistered RPC "{{ rpc.name() }}" on realm "{{ realm.name() }}" for bus "{{ rpc.bus() }}" on the "{{ server.vhost().name() }}" vhost');
            {% endfor %}
        });
        $this->router->addInternalClient($internalClient_{{ realm.name() }});
        {% endfor %}
    }

    public function router(): Router
    {
        $this->setUp();

        return $this->router;
    }

    public function start(Initialize $event): void
    {
        $this->setUp();

        $this->logger->debug('Starting websocket server: {{ server.vhost().name() }}');
        $this->router->start(false);
        $this->logger->debug('Started websocket server: {{ server.vhost().name() }}');
    }

    public function stop(Shutdown $event): void
    {
        $this->logger->debug('Stopping websocket server: {{ server.vhost().name() }}');
        $this->router->stop();
        $this->logger->debug('Stopped websocket server: {{ server.vhost().name() }}');
    }
}
// phpcs:enable
