<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Mammatus\Http\Server\Middleware\UnformattedContent;
use Mammatus\Http\Server\Web\Server;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Log\LoggerInterface;
use React\Cache\ArrayCache;
use React\EventLoop\LoopInterface;
use React\Http\Middleware\LimitConcurrentRequestsMiddleware;
use React\Http\Middleware\RequestBodyBufferMiddleware;
use React\Http\Middleware\StreamingRequestMiddleware;
use React\Http\Server as HttpServer;
use React\Promise\PromiseInterface;
use ReactInspector\HttpMiddleware\MiddlewareCollector;
use ReactParallel\EventLoop\EventLoopBridge;
use ReactParallel\Factory;
use ReactParallel\Logger\Logger;
use ReactParallel\Pool\Infinite\Infinite;
use ReactParallel\Pool\Worker\Worker as WorkerPool;
use ReactParallel\Streams\RecvObservable;
use ReactParallel\Streams\SingleRecv;
use Thruway\Middleware;
use WyriHaximus\PSR3\CallableThrowableLogger\CallableThrowableLogger;
use WyriHaximus\PSR3\ContextLogger\ContextLogger;
use WyriHaximus\React\Http\Middleware\WebrootPreloadMiddleware;
use function React\Promise\resolve;
use function WyriHaximus\iteratorOrArrayToArray;

/**
 * This class is generated by mammatus/http-server
 */
abstract class AbstractConfiguration
{
    private bool $initialized = false;

    abstract protected function middleware(): iterable;

    final protected function initialize(LoopInterface $loop, LoggerInterface $logger, ContainerInterface $container)
    {
        \Thruway\Logging\Logger::set($logger);
        $rpFactory = $container->get(Factory::class);
        $channelLogger = $container->get(Logger::class);
        {% for server in servers %}
        $workerPool_{{ server.vhost().name() }}    = new WorkerPool(
            $rpFactory,
            new RequestWorkerFactory_{{ server.vhost().name() }}($channelLogger),
            (int) '13'
        );
        $http_server_{{ server.vhost().name() }} = new HttpServer($loop, ...array_merge(
                iteratorOrArrayToArray($this->middleware()),
                [
                    new LimitConcurrentRequestsMiddleware(PHP_INT_MAX),
                    new StreamingRequestMiddleware(),
                    new MiddlewareCollector('{{ server.vhost().name() }}'),
                    {% if server.realms()|length > 0 %}
                        new Middleware(['/', '/ws/'], $loop, $container->get(RouterFactory_{{ server.vhost().name() }}::class)->router()),
                    {% endif %}
                    new RequestBodyBufferMiddleware(65536),
                    static fn (ServerRequestInterface $request, callable $next): PromiseInterface => resolve($next($request->withAttribute('vhost', '{{ server.vhost().name() }}'))),
                    {% if server.hasWebroot() %}
                    new WebrootPreloadMiddleware(
                        '{{ server.webroot() }}',
                        new ContextLogger($logger, ['section' => 'webroot'], 'webroot'),
                        new ArrayCache(), // TODO: Add support for other cache storages
                    ),
                    {% endif %}
                    static fn(ServerRequestInterface $request): PromiseInterface => $workerPool_{{ server.vhost().name() }}->perform(new \Mammatus\Http\Server\Middleware\Work(new \Mammatus\Http\Server\Middleware\Request($request))),
                ]
            )
        );
        $http_server_{{ server.vhost().name() }}->on('error', CallableThrowableLogger::create($logger));
        $this->server_{{ server.vhost().name() }} = new Server(
            '{{ server.vhost().name() }}',
            '0.0.0.0:{{ server.vhost().port() }}',
            $http_server_{{ server.vhost().name() }},
        );
        {% endfor %}

        $this->initialized = true;
    }


    /**
     * @return iterable<Server>
     */
    public function servers(): iterable
    {
        if ($this->initialized === false) {
            throw new \Exception('no init yet');
        }

        {% for server in servers %}
        yield '{{ server.vhost().name() }}' => $this->server_{{ server.vhost().name() }};
        {% endfor %}
    }
}
// phpcs:enable
